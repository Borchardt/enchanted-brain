AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Parameters:

  AdminUserPoolGroupName:
    Type: String

  CongitoUserPoolArn:
    Type: String

  Environment:
    Type: String
    AllowedValue:
      - development
      - production
      - staging
      - testing

  EventName:
    Type: String


Mappings:

  RouteKeys:
    ChoiceMade:
      Key: CHOICE_MADE
    Connect:
      Key: $connect
    Disconnect:
      Key: $disconnect
    EventStageChanged:
      Key: EVENT_STAGE_CHANGED


Globals:

  Function:
    Runtime: python3.7
    Handler: index.handler
    MemorySize: 128
    Timeout: 3
    AutoPublishAlias: live
    Environment:


Resources:

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-enchanted-brain
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      StreamSpecifiecation:
        StreamViewType: NEW_IMAGE

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${Environment}-enchanted-brain
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.event

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Environment}-enchanted-brain
      ContentUri: app/dist/layer
      CompatibleRuntimes:
        - nodejs10.x

  CallbackSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-enchanted-brain-callback-global
      KmsMasterKeyId: alias/aws/sns

  CallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/callback
      Environment:
        Variables:
          API_URL: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/@connections
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*

  CallbackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CallbackFunction.Alias
      Principal: sqs.amazonaws.com
      SourceArn: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-callback-*

  PublisherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/publisher
      Events:
        StreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt Table.StreamArn
            StartingPosition: TRIM_HORIZON
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt CallbackSnsTopic.TopicName

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/on-connect
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          APP_ENVIRONMENT: !Ref Environment
          CALLBACK_FUNCTION_ARN: !GetAtt CallbackFunction.Arn
          CALLBACK_SNS_TOPIC_ARN: !Ref CallbackSnsTopic
          TABLE_NAME: !Ref Table
      Policies:
        # TODO
        # Deploy stack
        # Create SQS queue
        # Create subscription to SNS topics for SQS queues
        - DynamoDBReadPolicy:
            TableName: !Ref Table

  OnConnectRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionName: !Ref OnConnectFunction
        FunctionArn: !GetAtt OnConnectFunction.Alias
        RouteKey: !FindInMap [RouteKeys, Connect, Key]

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/on-disconnect
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies: !Ref AWS::NoValue
        # TODO Policies
        # Delete stack
        # Delete SQS queue
        # Delete subscription to SNS topics for SQS queues

  OnDisconnectRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionName: !Ref OnDisconnectFunction
        FunctionArn: !GetAtt OnDisconnectFunction.Alias
        RouteKey: !FindInMap [RouteKeys, Disconnect, Key]

  ChoiceMadeSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-enchanted-brain-choice-made
      KmsMasterKeyId: alias/aws/sns

  OnChoiceMadeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/on-choice-made
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          CALLBACK_SNS_TOPIC_ARN: !Ref CallbackSnsTopic
          CHOICE_MADE_SNS_TOPIC_ARN: !Ref ChoiceMadeSnsTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ChoiceMadeSnsTopic.TopicName

  OnChoiceMadeRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionName: !Ref OnChoiceMadeFunction
        FunctionArn: !GetAtt OnChoiceMadeFunction.Alias
        RouteKey: !FindInMap [RouteKeys, ChoiceMade, Key]

  ApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ChoiceMadeRoute
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment
      StageName: Prod

  ChoiceRecorderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/choice-recorder
      Layers:
        - !Ref LambdaLayer
      Events:
        SnsEvent:
          Type: SNS
          Properties:
            Topic: !Ref ChoiceMadeSnsTopic
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table

  OnEventStageChangedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/on-event-stage-changed
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table


Outputs:

  TableName:
    Value: !Ref Table

  WebSocketURI:
    Value: !Sub wss://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}
